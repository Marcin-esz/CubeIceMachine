//----------------------------------------------
//
//        Sketch Generated by Visuino
//              www.visuino.com
//          Version  7.8.2.246
//
//------------------ Source --------------------
//
// CubeRemake.owarduino
//
//----------------------------------------------

#define VISUINO_ARDUINO_UNO
#define _MITOV_DISPLAY_SSD1306_I2C

#include <OpenWire.h>
#include <Mitov.h>
#include <Mitov_FormattedSerial.h>

#include <Mitov_Basic_I2C.h>
#include <Wire.h>
#include <OneWire.h>  // The OneWire library https://github.com/adafruit/MAX31850_OneWire needs to be installed trough the Arduino IDE for this Scetch to compile!
#include <DallasTemperature.h>  // The MAX31850 DallasTemp library https://github.com/adafruit/MAX31850_DallasTemp needs to be installed trough the Arduino IDE for this Scetch to compile!
#include <Mitov_Maxim_OneWire_Thermometer.h>
#include <Mitov_Button.h>
#include <Mitov_Display_SSD1306_I2C.h>
#include <Mitov_Generic_I2C_EEPROM.h>

// Arduino Board Declarations

namespace BoardDeclarations
{
Mitov::ArduinoDigitalOutputChannel<2> ArduinoDigitalChannel_2( false, false );
Mitov::ArduinoDigitalOutputChannel<3> ArduinoDigitalChannel_3( false, false );
Mitov::ArduinoDigitalOutputChannel<4> ArduinoDigitalChannel_4( false, false );
Mitov::ArduinoDigitalOutputChannel<5> ArduinoDigitalChannel_5( false, false );
Mitov::ArduinoDigitalOutputChannel<6> ArduinoDigitalChannel_6( false, false );
Mitov::ArduinoDigitalOutputChannel<7> ArduinoDigitalChannel_7( false, false );
Mitov::ArduinoDigitalOutputChannel<10> ArduinoDigitalChannel_10( false, false );
} // BoardDeclarations

// Declarations

namespace Declarations
{
Mitov::OneWireThermometer TempUp( 8, 0 );
Mitov::OneWireThermometer TempDn( -1, 1 );
Mitov::Button Yogurt;
Mitov::Button Sorbet;
Mitov::Button Cream;
Mitov::Button Watch;
Mitov::DisplaySSD1306<Mitov::DisplaySSD1306NoReset<Mitov::Display_odtSSD1306_I2C<0x12,60,128,64,TwoWire,Wire>>, 128, 64> DisplayOLED1 = Mitov::DisplaySSD1306<Mitov::DisplaySSD1306NoReset<Mitov::Display_odtSSD1306_I2C<0x12,60,128,64,TwoWire,Wire>>, 128, 64>( nullptr );
Mitov::ArduinoGenericEEPROM_I2C<80, TwoWire, Wire> EEPROM1;
} // Declarations

// Pin Call Declarations

namespace PinCalls
{
void PinCallerReceive1( void *_Data );
void PinCallerReceive2( void *_Data );
void PinCallerReceive3( void *_Data );
void PinCallerReceive4( void *_Data );
void PinCallerReceive5( void *_Data );
} // PinCalls

// Pin Call Implementations

namespace PinCalls
{
void PinCallerReceive1( void *_Data )
{
  Declarations::Sorbet.InputPin_o_Receive( _Data );
}

void PinCallerReceive2( void *_Data )
{
  Declarations::Cream.InputPin_o_Receive( _Data );
}

void PinCallerReceive3( void *_Data )
{
  Declarations::Yogurt.InputPin_o_Receive( _Data );
}

void PinCallerReceive4( void *_Data )
{
  Declarations::Watch.InputPin_o_Receive( _Data );
}

void PinCallerReceive5( void *_Data )
{
  Declarations::TempUp.OneWireInputPin_o_Receive( _Data );
}

} // PinCalls

namespace ComponentsHardware
{
void SystemUpdateHardware()
{
  Declarations::EEPROM1.SystemLoopUpdateHardware();
}
} // ComponentsHardware

//The setup function is called once at startup of the sketch
void setup()
{
  Wire.begin();
  BoardDeclarations::ArduinoDigitalChannel_4.OutputPin.SetCallback( PinCalls::PinCallerReceive1 );
  BoardDeclarations::ArduinoDigitalChannel_5.OutputPin.SetCallback( PinCalls::PinCallerReceive2 );
  BoardDeclarations::ArduinoDigitalChannel_6.OutputPin.SetCallback( PinCalls::PinCallerReceive3 );
  BoardDeclarations::ArduinoDigitalChannel_7.OutputPin.SetCallback( PinCalls::PinCallerReceive4 );
  Declarations::TempDn.OneWireOutputPin.SetCallback( PinCalls::PinCallerReceive5 );
  Declarations::TempDn.AlarmHighTemperature = 0;
  Declarations::TempDn.AlarmLowTemperature = -20;
  Declarations::TempUp.AlarmHighTemperature = 0;
  Declarations::TempUp.AlarmLowTemperature = -10;

  BoardDeclarations::ArduinoDigitalChannel_2.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_3.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_4.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_5.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_6.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_7.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_10.SystemInit();
  Declarations::TempDn.SystemInit();
  Declarations::TempUp.SystemInit();
  Declarations::DisplayOLED1.SystemInit();
  Declarations::EEPROM1.SystemInit();

  BoardDeclarations::ArduinoDigitalChannel_2.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_3.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_4.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_5.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_6.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_7.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_10.SystemStart();
  Declarations::TempDn.SystemStart();
  Declarations::TempUp.SystemStart();
  Declarations::Yogurt.SystemStart();
  Declarations::Sorbet.SystemStart();
  Declarations::Cream.SystemStart();
  Declarations::Watch.SystemStart();
  Declarations::DisplayOLED1.SystemStart();
}

// The loop function is called in an endless loop
void loop()
{
  unsigned long A_Current_Microseconds = micros();

  BoardDeclarations::ArduinoDigitalChannel_2.SystemLoopBegin( A_Current_Microseconds );
  BoardDeclarations::ArduinoDigitalChannel_3.SystemLoopBegin( A_Current_Microseconds );
  BoardDeclarations::ArduinoDigitalChannel_4.SystemLoopBegin( A_Current_Microseconds );
  BoardDeclarations::ArduinoDigitalChannel_5.SystemLoopBegin( A_Current_Microseconds );
  BoardDeclarations::ArduinoDigitalChannel_6.SystemLoopBegin( A_Current_Microseconds );
  BoardDeclarations::ArduinoDigitalChannel_7.SystemLoopBegin( A_Current_Microseconds );
  BoardDeclarations::ArduinoDigitalChannel_10.SystemLoopBegin( A_Current_Microseconds );
  Declarations::TempDn.SystemLoopBegin( A_Current_Microseconds );
  Declarations::TempUp.SystemLoopBegin( A_Current_Microseconds );
  Declarations::Yogurt.SystemLoopBegin( A_Current_Microseconds );
  Declarations::Sorbet.SystemLoopBegin( A_Current_Microseconds );
  Declarations::Cream.SystemLoopBegin( A_Current_Microseconds );
  Declarations::Watch.SystemLoopBegin( A_Current_Microseconds );

  Declarations::DisplayOLED1.SystemLoopEnd( A_Current_Microseconds );

  ComponentsHardware::SystemUpdateHardware();
}
